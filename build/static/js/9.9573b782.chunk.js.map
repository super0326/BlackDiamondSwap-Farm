{"version":3,"sources":["hooks/useTickets.ts","utils/lotteryUtils.js","hooks/useGetLotteryHasDrawn.ts","hooks/useTokenBalance.ts","hooks/useBuyLottery.ts","hooks/useHarvest.ts","components/TicketInput/TicketInput.tsx","views/Lottery/components/TicketCard/BuyTicketModal.tsx","hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeWinnings.tsx","views/Home/components/LotteryJackpot.tsx","views/Home/components/LotteryCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/Home.tsx"],"names":["useTotalRewards","useState","BigNumber","rewards","setRewards","lotteryContract","useLottery","fastRefresh","useRefresh","useEffect","a","getTotalRewards","res","fetchBalance","useTotalClaim","claimAmount","setClaimAmount","claimLoading","setClaimLoading","account","useWallet","ticketsContract","useLotteryTicket","useCallback","getTotalClaim","claim","useWinningNumbers","winngNumbers","setWinningNumbers","getWinningNumbers","useMatchingRewardLength","numbers","matchingNumbers","setMatchingNumbers","getMatchingRewardLength","matchedNumbaers","useTickets","lotteryNumber","tickets","setTickets","getTickets","multiCall","abi","calls","web3","getWeb3","multi","eth","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","length","i","newCalls","slice","calldata","map","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","concat","index","decodeFunctionResult","multiBuy","price","numbersList","times","pow","toString","send","from","on","tx","transactionHash","console","error","customLotteryNum","issueIndex","issueIdex","getTicketsAmount","calls1","Array","apply","options","address","ticketAbi","tokenIds","id","calls2","ticketIssues","finalTokenids","forEach","ticketIssue","push","calls3","getLotteryStatus","balanceOf","multiClaim","claimedStatus","unClaimedIds","filter","lotteryAbi","finanltokenIds","r","drawed","calls4","reduce","p","c","sum","getMax","maxNumber","getLotteryIssueIndex","matchNumber","historyAmount","amount","parseInt","historyNumbers","winningNumbers","useGetLotteryHasDrawn","lotteryHasDrawn","setLotteryHasDrawn","state","fetchLotteryStatus","useTotalSupply","slowRefresh","totalSupply","setTotalSupply","cakeContract","getContract","cakeABI","getCakeAddress","supply","fetchTotalSupply","useBurnedBalance","tokenAddress","balance","setBalance","bal","useTokenBalance","ethereum","getTokenBalance","useMultiClaimLottery","lotteryTicketContract","onMultiClaim","txHash","useMultiBuyLottery","onMultiBuy","useMaxNumber","max","setMax","fetchMax","useHarvest","farmPid","dispatch","useDispatch","masterChefContract","useMasterchef","onReward","harvest","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","accum","pid","Promise","all","StyledTokenInput","styled","div","StyledSpacer","props","theme","spacing","StyledTokenAdornmentWrapper","StyledMaxText","colors","primary","StyledTokenSymbol","span","TicketInput","symbol","availableSymbol","onChange","onSelectMax","value","TranslateString","useI18n","Input","endAdornment","size","onClick","placeholder","toLocaleString","Tips","BuyTicketModal","onDismiss","val","setVal","pendingTx","setPendingTx","setRequestedBuy","fullBalance","useMemo","getFullDisplayBalance","maxTickets","handleBuy","Math","floor","random","handleSelectMax","Number","title","e","currentTarget","Announce","Final","ModalActions","fullWidth","variant","disabled","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","farmsConfig","farm","getMasterChefAddress","name","params","multicall","masterChefABI","rawResults","results","fetchBalances","CardValue","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","earningsSum","color","style","lineHeight","CakeWalletBalance","cakeBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","Card","Block","CardImage","img","Label","textSubtle","Actions","FarmedStakingCard","farmsWithBalance","getBalanceNumber","eggPrice","usePriceCakeBusd","toNumber","earning","balancesWithValue","balanceType","farmWithBalance","harvestAllFarms","mb","src","alt","width","height","toFixed","UnlockButton","CakeWinnings","LotteryJackpot","lotteryPrizeAmount","maximumFractionDigits","StyledLotteryCard","requesteClaim","setRequestedClaim","handleClaim","useModal","tokenName","onPresentBuy","marginRight","StyledCakeStats","Row","CakeStats","burnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","eggPerBlock","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","chrome","Hero","mediaQueries","lg","Cards","BaseLayout","sm","FullCards","Home","Page","as","FarmStakingCard","LotteryCard"],"mappings":"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","file":"static/js/9.9573b782.chunk.js","sourcesContent":["import { useCallback, useState, useEffect } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\r\nimport useRefresh from './useRefresh'\r\nimport {\r\n  getTotalRewards,\r\n  getTotalClaim,\r\n  getMatchingRewardLength,\r\n  getWinningNumbers,\r\n  getTickets,\r\n} from '../utils/lotteryUtils'\r\n\r\nconst useTickets = (lotteryNumber = null) => {\r\n  const [tickets, setTickets] = useState([])\r\n  const { account } = useWallet()\r\n  const ticketsContract = useLotteryTicket()\r\n  const lotteryContract = useLottery()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTickets(lotteryContract, ticketsContract, account, lotteryNumber)\r\n      setTickets(res)\r\n    }\r\n\r\n    if (account && lotteryContract && ticketsContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, lotteryContract, ticketsContract, fastRefresh, lotteryNumber])\r\n\r\n  return tickets\r\n}\r\n\r\nexport const useTotalRewards = () => {\r\n  const [rewards, setRewards] = useState(new BigNumber(0))\r\n  const lotteryContract = useLottery()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTotalRewards(lotteryContract)\r\n      setRewards(new BigNumber(res))\r\n    }\r\n\r\n    if (lotteryContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [lotteryContract, fastRefresh])\r\n\r\n  return rewards\r\n}\r\n\r\nexport const useTotalClaim = () => {\r\n  const [claimAmount, setClaimAmount] = useState(new BigNumber(0))\r\n  const [claimLoading, setClaimLoading] = useState(false)\r\n  const { account } = useWallet()\r\n  const ticketsContract = useLotteryTicket()\r\n  const lotteryContract = useLottery()\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    setClaimLoading(true)\r\n    const claim = await getTotalClaim(lotteryContract, ticketsContract, account)\r\n    setClaimAmount(claim)\r\n    setClaimLoading(false)\r\n  }, [account, lotteryContract, ticketsContract])\r\n\r\n  useEffect(() => {\r\n    if (account && lotteryContract && ticketsContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, fetchBalance, lotteryContract, ticketsContract])\r\n\r\n  return { claimLoading, claimAmount }\r\n}\r\n\r\nexport const useWinningNumbers = () => {\r\n  const [winngNumbers, setWinningNumbers] = useState([0, 0, 0, 0])\r\n  const lotteryContract = useLottery()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const rewards = await getWinningNumbers(lotteryContract)\r\n      setWinningNumbers(rewards)\r\n    }\r\n\r\n    if (lotteryContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [fastRefresh, lotteryContract, setWinningNumbers])\r\n\r\n  return winngNumbers\r\n}\r\n\r\nexport const useMatchingRewardLength = (numbers) => {\r\n  const [matchingNumbers, setMatchingNumbers] = useState(0)\r\n  const lotteryContract = useLottery()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const matchedNumbaers = await getMatchingRewardLength(lotteryContract, numbers)\r\n      setMatchingNumbers(matchedNumbaers)\r\n    }\r\n\r\n    if (lotteryContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [lotteryContract, numbers, fastRefresh])\r\n\r\n  return matchingNumbers\r\n}\r\n\r\nexport default useTickets\r\n","/* eslint-disable no-await-in-loop */\r\nimport BigNumber from 'bignumber.js'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport MultiCallAbi from 'config/abi/Multicall.json'\r\nimport ticketAbi from 'config/abi/lotteryNft.json'\r\nimport lotteryAbi from 'config/abi/lottery.json'\r\nimport { getMulticallAddress } from './addressHelpers'\r\n\r\nexport const multiCall = async (abi, calls) => {\r\n  const web3 = getWeb3()\r\n  const multi = new web3.eth.Contract(MultiCallAbi, getMulticallAddress())\r\n  const itf = new Interface(abi)\r\n  let res = []\r\n  if (calls.length > 100) {\r\n    let i = 0\r\n    while (i < calls.length / 100) {\r\n      const newCalls = calls.slice(i * 100, 100 * (i + 1))\r\n      const calldata = newCalls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\r\n      const { returnData } = await multi.methods.aggregate(calldata).call()\r\n      i++\r\n      res = res.concat(returnData.map((call, index) => itf.decodeFunctionResult(newCalls[index][1], call)))\r\n    }\r\n  } else {\r\n    const calldata = calls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\r\n    const { returnData } = await multi.methods.aggregate(calldata).call()\r\n    res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i][1], call))\r\n  }\r\n  return res\r\n}\r\n\r\nexport const multiBuy = async (lotteryContract, price, numbersList, account) => {\r\n  try {\r\n    return lotteryContract.methods\r\n      .multiBuy(new BigNumber(price).times(new BigNumber(10).pow(18)).toString(), numbersList)\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  } catch (err) {\r\n    return console.error(err)\r\n  }\r\n}\r\n\r\nexport const getTickets = async (lotteryContract, ticketsContract, account, customLotteryNum) => {\r\n  const issueIdex = customLotteryNum || (await lotteryContract.methods.issueIndex().call())\r\n  const length = await getTicketsAmount(ticketsContract, account)\r\n\r\n  // eslint-disable-next-line prefer-spread\r\n  const calls1 = Array.apply(null, { length }).map((a, i) => [\r\n    ticketsContract.options.address,\r\n    'tokenOfOwnerByIndex',\r\n    [account, i],\r\n  ])\r\n  const res = await multiCall(ticketAbi, calls1)\r\n\r\n  const tokenIds = res.map((id) => id.toString())\r\n\r\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\r\n  const ticketIssues = await multiCall(ticketAbi, calls2)\r\n\r\n  const finalTokenids = []\r\n  ticketIssues.forEach(async (ticketIssue, i) => {\r\n    if (ticketIssue.toString() === issueIdex) {\r\n      finalTokenids.push(tokenIds[i])\r\n    }\r\n  })\r\n  const calls3 = finalTokenids.map((id) => [ticketsContract.options.address, 'getLotteryNumbers', [id]])\r\n  const tickets = await multiCall(ticketAbi, calls3)\r\n\r\n  await getLotteryStatus(lotteryContract)\r\n  return tickets\r\n}\r\n\r\nexport const getTicketsAmount = async (ticketsContract, account) => {\r\n  return ticketsContract.methods.balanceOf(account).call()\r\n}\r\n\r\nexport const multiClaim = async (lotteryContract, ticketsContract, account) => {\r\n  await lotteryContract.methods.issueIndex().call()\r\n  const length = await getTicketsAmount(ticketsContract, account)\r\n  // eslint-disable-next-line prefer-spread\r\n  const calls1 = Array.apply(null, { length }).map((a, i) => [\r\n    ticketsContract.options.address,\r\n    'tokenOfOwnerByIndex',\r\n    [account, i],\r\n  ])\r\n  const res = await multiCall(ticketAbi, calls1)\r\n  const tokenIds = res.map((id) => id.toString())\r\n\r\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\r\n  const claimedStatus = await multiCall(ticketAbi, calls2)\r\n\r\n  const unClaimedIds = tokenIds.filter((id, index) => !claimedStatus[index][0])\r\n\r\n  const calls3 = unClaimedIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\r\n  const rewards = await multiCall(lotteryAbi, calls3)\r\n\r\n  let finanltokenIds = []\r\n  rewards.forEach((r, i) => {\r\n    if (r > 0) {\r\n      finanltokenIds.push(unClaimedIds[i])\r\n    }\r\n  })\r\n\r\n  if (finanltokenIds.length > 200) {\r\n    finanltokenIds = finanltokenIds.slice(0, 200)\r\n  }\r\n\r\n  try {\r\n    return lotteryContract.methods\r\n      .multiClaim(finanltokenIds)\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  } catch (err) {\r\n    return console.error(err)\r\n  }\r\n}\r\n\r\nexport const getTotalClaim = async (lotteryContract, ticketsContract, account) => {\r\n  try {\r\n    const issueIdex = await lotteryContract.methods.issueIndex().call()\r\n    const length = await getTicketsAmount(ticketsContract, account)\r\n    // eslint-disable-next-line prefer-spread\r\n    const calls1 = Array.apply(null, { length }).map((a, i) => [\r\n      ticketsContract.options.address,\r\n      'tokenOfOwnerByIndex',\r\n      [account, i],\r\n    ])\r\n    const res = await multiCall(ticketAbi, calls1)\r\n    const tokenIds = res.map((id) => id.toString())\r\n    const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\r\n    const ticketIssues = await multiCall(ticketAbi, calls2)\r\n    const calls3 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\r\n    const claimedStatus = await multiCall(ticketAbi, calls3)\r\n\r\n    const drawed = await getLotteryStatus(lotteryContract)\r\n\r\n    const finalTokenids = []\r\n    ticketIssues.forEach(async (ticketIssue, i) => {\r\n      // eslint-disable-next-line no-empty\r\n      if (!drawed && ticketIssue.toString() === issueIdex) {\r\n      } else if (!claimedStatus[i][0]) {\r\n        finalTokenids.push(tokenIds[i])\r\n      }\r\n    })\r\n\r\n    const calls4 = finalTokenids.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\r\n\r\n    const rewards = await multiCall(lotteryAbi, calls4)\r\n    const claim = rewards.reduce((p, c) => BigNumber.sum(p, c), BigNumber(0))\r\n\r\n    return claim\r\n  } catch (err) {\r\n    console.error(err)\r\n  }\r\n  return BigNumber(0)\r\n}\r\n\r\nexport const getTotalRewards = async (lotteryContract) => {\r\n  const issueIdex = await lotteryContract.methods.issueIndex().call()\r\n  return lotteryContract.methods.getTotalRewards(issueIdex).call()\r\n}\r\n\r\nexport const getMax = async (lotteryContract) => {\r\n  return lotteryContract.methods.maxNumber().call()\r\n}\r\n\r\nexport const getLotteryIssueIndex = async (lotteryContract) => {\r\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\r\n  return issueIndex\r\n}\r\n\r\nexport const getLotteryStatus = async (lotteryContract) => {\r\n  return lotteryContract.methods.drawed().call()\r\n}\r\n\r\nexport const getMatchingRewardLength = async (lotteryContract, matchNumber) => {\r\n  let issueIdex = await lotteryContract.methods.issueIndex().call()\r\n  const drawed = await lotteryContract.methods.drawed().call()\r\n  if (!drawed) {\r\n    issueIdex -= 1\r\n  }\r\n  try {\r\n    const amount = await lotteryContract.methods.historyAmount(issueIdex, 5 - matchNumber).call()\r\n    return amount / 1e18 / 10\r\n  } catch (err) {\r\n    console.error(err)\r\n  }\r\n  return 0\r\n}\r\n\r\nexport const getWinningNumbers = async (lotteryContract) => {\r\n  const issueIdex = await lotteryContract.methods.issueIndex().call()\r\n  const numbers = []\r\n  const drawed = await lotteryContract.methods.drawed().call()\r\n\r\n  if (!drawed && parseInt(issueIdex, 10) === 0) {\r\n    return [0, 0, 0, 0]\r\n  }\r\n  if (!drawed) {\r\n    for (let i = 0; i < 4; i++) {\r\n      numbers.push(+(await lotteryContract.methods.historyNumbers(issueIdex - 1, i).call()).toString())\r\n    }\r\n  } else {\r\n    for (let i = 0; i < 4; i++) {\r\n      numbers.push(+(await lotteryContract.methods.winningNumbers(i).call()).toString())\r\n    }\r\n  }\r\n  return numbers\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useLottery } from 'hooks/useContract'\r\nimport { getLotteryStatus } from 'utils/lotteryUtils'\r\n\r\n/**\r\n * Returns whether or not the current lottery has drawn numbers\r\n *\r\n * @return {Boolean}\r\n */\r\nconst useGetLotteryHasDrawn = () => {\r\n  const [lotteryHasDrawn, setLotteryHasDrawn] = useState(true)\r\n  const { account } = useWallet()\r\n  const lotteryContract = useLottery()\r\n\r\n  useEffect(() => {\r\n    if (account && lotteryContract) {\r\n      const fetchLotteryStatus = async () => {\r\n        const state = await getLotteryStatus(lotteryContract)\r\n        setLotteryHasDrawn(state)\r\n      }\r\n\r\n      fetchLotteryStatus()\r\n    }\r\n  }, [account, lotteryContract])\r\n\r\n  return lotteryHasDrawn\r\n}\r\n\r\nexport default useGetLotteryHasDrawn\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport { getContract } from 'utils/web3'\r\nimport { getTokenBalance } from 'utils/erc20'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && ethereum) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, ethereum, tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(bal))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n","import { useCallback, useState, useEffect } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\r\nimport { multiClaim, getMax, multiBuy } from '../utils/lotteryUtils'\r\n\r\nexport const useMultiClaimLottery = () => {\r\n  const { account } = useWallet()\r\n  const lotteryContract = useLottery()\r\n  const lotteryTicketContract = useLotteryTicket()\r\n\r\n  const handleClaim = useCallback(async () => {\r\n    try {\r\n      const txHash = await multiClaim(lotteryContract, lotteryTicketContract, account)\r\n      return txHash\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, lotteryContract, lotteryTicketContract])\r\n\r\n  return { onMultiClaim: handleClaim }\r\n}\r\n\r\nexport const useMultiBuyLottery = () => {\r\n  const { account } = useWallet()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleBuy = useCallback(\r\n    async (amount: string, numbers: Array<any>) => {\r\n      try {\r\n        const txHash = await multiBuy(lotteryContract, amount, numbers, account)\r\n        return txHash\r\n      } catch (e) {\r\n        return false\r\n      }\r\n    },\r\n    [account, lotteryContract],\r\n  )\r\n\r\n  return { onMultiBuy: handleBuy }\r\n}\r\n\r\nexport const useMaxNumber = () => {\r\n  const [max, setMax] = useState(5)\r\n  const lotteryContract = useLottery()\r\n\r\n  const fetchMax = useCallback(async () => {\r\n    const maxNumber = await getMax(lotteryContract)\r\n    setMax(maxNumber)\r\n  }, [lotteryContract])\r\n\r\n  useEffect(() => {\r\n    if (lotteryContract) {\r\n      fetchMax()\r\n    }\r\n  }, [lotteryContract, fetchMax])\r\n\r\n  return max\r\n}\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useHarvest = (farmPid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const txHash = await harvest(masterChefContract, farmPid, account)\r\n    dispatch(fetchFarmUserDataAsync(account))\r\n    return txHash\r\n  }, [account, dispatch, farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useAllHarvest = (farmPids: number[]) => {\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const harvestPromises = farmPids.reduce((accum, pid) => {\r\n      return [...accum, harvest(masterChefContract, pid, account)]\r\n    }, [])\r\n\r\n    return Promise.all(harvestPromises)\r\n  }, [account, farmPids, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvest(masterChefContract, 0, account)\r\n    } else if (isUsingBnb) {\r\n      await soushHarvestBnb(sousChefContract, account)\r\n    } else {\r\n      await soushHarvest(sousChefContract, account)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button } from '@pancakeswap-libs/uikit'\r\nimport useI18n from '../../hooks/useI18n'\r\nimport Input, { InputProps } from '../Input'\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string\r\n  symbol: string\r\n  availableSymbol: string\r\n  onSelectMax?: () => void\r\n}\r\n\r\nconst TicketInput: React.FC<TokenInputProps> = ({ max, symbol, availableSymbol, onChange, onSelectMax, value }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <StyledTokenInput>\r\n      <Input\r\n        endAdornment={\r\n          <StyledTokenAdornmentWrapper>\r\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\r\n            <StyledSpacer />\r\n            <div>\r\n              <Button size=\"sm\" onClick={onSelectMax}>\r\n                {TranslateString(452, 'Max')}\r\n              </Button>\r\n            </div>\r\n          </StyledTokenAdornmentWrapper>\r\n        }\r\n        onChange={onChange}\r\n        placeholder=\"0\"\r\n        value={value}\r\n      />\r\n      <StyledMaxText>{TranslateString(454, `${max.toLocaleString()} ${availableSymbol} Available`)}</StyledMaxText>\r\n    </StyledTokenInput>\r\n  )\r\n}\r\n\r\nconst StyledTokenInput = styled.div``\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`\r\n\r\nconst StyledTokenSymbol = styled.span`\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-weight: 700;\r\n`\r\n\r\nexport default TicketInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport TicketInput from 'components/TicketInput'\r\nimport ModalActions from 'components/ModalActions'\r\nimport { useMultiBuyLottery, useMaxNumber } from 'hooks/useBuyLottery'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\ninterface BuyTicketModalProps {\r\n  max: BigNumber\r\n  onConfirm?: (amount: string, numbers: Array<number>) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst BuyTicketModal: React.FC<BuyTicketModalProps> = ({ max, onDismiss }) => {\r\n  const [val, setVal] = useState('1')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [, setRequestedBuy] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const maxTickets = useMemo(() => {\r\n    return parseInt(getFullDisplayBalance(max.div(new BigNumber(10))))\r\n  }, [max])\r\n\r\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => setVal(e.currentTarget.value)\r\n\r\n  const { onMultiBuy } = useMultiBuyLottery()\r\n  const maxNumber = useMaxNumber()\r\n  const handleBuy = useCallback(async () => {\r\n    try {\r\n      setRequestedBuy(true)\r\n      const length = parseInt(val)\r\n      // @ts-ignore\r\n      // eslint-disable-next-line prefer-spread\r\n      const numbers = Array.apply(null, { length }).map(() => [\r\n        Math.floor(Math.random() * maxNumber) + 1,\r\n        Math.floor(Math.random() * maxNumber) + 1,\r\n        Math.floor(Math.random() * maxNumber) + 1,\r\n        Math.floor(Math.random() * maxNumber) + 1,\r\n      ])\r\n      const txHash = await onMultiBuy('10', numbers)\r\n      // user rejected tx or didn't go thru\r\n      if (txHash) {\r\n        setRequestedBuy(false)\r\n      }\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onMultiBuy, setRequestedBuy, maxNumber, val])\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    if (Number(maxTickets) > 50) {\r\n      setVal('50')\r\n    } else {\r\n      setVal(maxTickets.toString())\r\n    }\r\n  }, [maxTickets])\r\n\r\n  const cakeCosts = (amount: string): number => {\r\n    return +amount * 10\r\n  }\r\n  return (\r\n    <Modal title={TranslateString(450, 'Enter amount of tickets to buy')} onDismiss={onDismiss}>\r\n      <TicketInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol=\"TICKET\"\r\n        availableSymbol=\"CAKE\"\r\n      />\r\n      <div>\r\n        <Tips>{TranslateString(456, 'Your amount must be a multiple of 10 CAKE')}</Tips>\r\n        <Tips>{TranslateString(458, '1 Ticket = 10 CAKE')}</Tips>\r\n      </div>\r\n      <div>\r\n        <Announce>\r\n          {TranslateString(\r\n            478,\r\n            'Ticket purchases are final. Your CAKE cannot be returned to you after buying tickets.',\r\n          )}\r\n        </Announce>\r\n        <Final>{TranslateString(460, `You will spend: ${cakeCosts(val)} CAKE`)}</Final>\r\n      </div>\r\n      <ModalActions>\r\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          id=\"lottery-buy-complete\"\r\n          fullWidth\r\n          disabled={pendingTx || parseInt(val) > Number(maxTickets) || parseInt(val) > 50 || parseInt(val) < 1}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await handleBuy()\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default BuyTicketModal\r\n\r\nconst Tips = styled.div`\r\n  margin-left: 0.4em;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  color: ${(props) => props.theme.colors.primary};\r\n`\r\n\r\nconst Final = styled.div`\r\n  margin-top: 1em;\r\n  text-align: center;\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n  color: ${(props) => props.theme.colors.primary};\r\n`\r\nconst Announce = styled.div`\r\n  margin-top: 1em;\r\n  margin-left: 0.4em;\r\n  color: #ed4b9e;\r\n`\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingEgg',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\ninterface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  prefix?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold fontSize={fontSize}>\r\n      {prefix}{countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeHarvestBalance = ({earningsSum}) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={earningsSum} />\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeWalletBalance = ({ cakeBalance }) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account }: { account: string } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingEgg',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const res = await multicall(masterChefABI, calls)\r\n\r\n      setBalance(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\nimport { usePriceCakeBusd } from '../../../state/hooks'\r\nimport useTokenBalance from '../../../hooks/useTokenBalance'\r\nimport { getCakeAddress } from '../../../utils/addressHelpers'\r\nimport useAllEarnings from '../../../hooks/useAllEarnings'\r\nimport { getBalanceNumber } from '../../../utils/formatBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('/images/home/2a.png');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWallet()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\r\n  const eggPrice = usePriceCakeBusd().toNumber()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </Heading>\r\n        <CardImage src=\"/images/home/2.png\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n          <Label>{TranslateString(544, 'PIT to Harvest')}</Label>\r\n          <CakeHarvestBalance earningsSum={earningsSum}/>\r\n          <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\r\n        </Block>\r\n        <Block>\r\n          <Label>{TranslateString(546, 'PIT in Wallet')}</Label>\r\n          <CakeWalletBalance cakeBalance={cakeBalance} />\r\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              fullWidth\r\n            >\r\n              {pendingTx\r\n                ? TranslateString(548, 'Collecting EGG')\r\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton fullWidth />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { useTotalClaim } from 'hooks/useTickets'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeWinnings = () => {\r\n  const { claimAmount } = useTotalClaim()\r\n  return <CardValue value={getBalanceNumber(claimAmount)} />\r\n}\r\n\r\nexport default CakeWinnings\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalRewards } from 'hooks/useTickets'\r\n\r\nconst LotteryJackpot = () => {\r\n  const lotteryPrizeAmount = useTotalRewards()\r\n\r\n  return (\r\n    <Text bold fontSize=\"24px\">\r\n      {getBalanceNumber(lotteryPrizeAmount).toLocaleString(undefined, {\r\n        maximumFractionDigits: 2,\r\n      })}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default LotteryJackpot\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button, useModal } from '@pancakeswap-libs/uikit'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { useMultiClaimLottery } from 'hooks/useBuyLottery'\r\nimport { useTotalClaim } from 'hooks/useTickets'\r\nimport BuyModal from 'views/Lottery/components/TicketCard/BuyTicketModal'\r\nimport CakeWinnings from './CakeWinnings'\r\nimport LotteryJackpot from './LotteryJackpot'\r\n\r\nconst StyledLotteryCard = styled(Card)`\r\n  background-image: url('/images/ticket-bg.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: flex;\r\n  margin-top: 24px;\r\n  button {\r\n    flex: 1 0 50%;\r\n  }\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\r\n  const [requesteClaim, setRequestedClaim] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const { claimAmount } = useTotalClaim()\r\n  const { onMultiClaim } = useMultiClaimLottery()\r\n  const cakeBalance = useTokenBalance(getCakeAddress())\r\n\r\n  const handleClaim = useCallback(async () => {\r\n    try {\r\n      setRequestedClaim(true)\r\n      const txHash = await onMultiClaim()\r\n      // user rejected tx or didn't go thru\r\n      if (txHash) {\r\n        setRequestedClaim(false)\r\n      }\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onMultiClaim, setRequestedClaim])\r\n\r\n  const [onPresentBuy] = useModal(<BuyModal max={cakeBalance} tokenName=\"CAKE\" />)\r\n\r\n  return (\r\n    <StyledLotteryCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(550, 'Your Lottery Winnings')}\r\n        </Heading>\r\n        <CardImage src=\"/images/ticket.svg\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n          <CakeWinnings />\r\n          <Label>{TranslateString(552, 'CAKE to Collect')}</Label>\r\n        </Block>\r\n        <Block>\r\n          <LotteryJackpot />\r\n          <Label>{TranslateString(554, 'Total jackpot this round')}</Label>\r\n        </Block>\r\n        <Actions>\r\n          <Button\r\n            id=\"dashboard-collect-winnings\"\r\n            disabled={getBalanceNumber(claimAmount) === 0 || requesteClaim}\r\n            onClick={handleClaim}\r\n            style={{ marginRight: '8px' }}\r\n          >\r\n            {TranslateString(556, 'Collect Winnings')}\r\n          </Button>\r\n          <Button id=\"dashboard-buy-tickets\" variant=\"secondary\" onClick={onPresentBuy} disabled={lotteryHasDrawn}>\r\n            {TranslateString(558, 'Buy Tickets')}\r\n          </Button>\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledLotteryCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = useBurnedBalance(getCakeAddress())\r\n  const farms = useFarms();\r\n  const eggPrice = usePriceCakeBusd();\r\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\r\n  const cakeSupply = getBalanceNumber(circSupply);\r\n  const marketCap = eggPrice.times(circSupply);\r\n\r\n  let eggPerBlock = 0;\r\n  if(farms && farms[0] && farms[0].eggPerBlock){\r\n    eggPerBlock = new BigNumber(farms[0].eggPerBlock).div(new BigNumber(10).pow(18)).toNumber();\r\n  }\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(534, 'PIT Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\r\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\r\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(540, 'New PIT/block')}</Text>\r\n          <Text bold fontSize=\"14px\">{eggPerBlock}</Text>\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useGetStats } from 'hooks/api'\r\nimport { useTotalValue } from '../../../state/hooks'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const TranslateString = useI18n()\r\n  // const data = useGetStats()\r\n  const totalValue = useTotalValue();\r\n  // const tvl = totalValue.toFixed(2);\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        <Heading size=\"lg\" mb=\"24px\">\r\n          {TranslateString(999, 'Total Value Locked (TVL)')}\r\n        </Heading>\r\n        <>\r\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\r\n          {/* <Heading size=\"xl\"> */}\r\n            <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\r\n          {/* </Heading> */}\r\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\r\n        </>\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { Timeline } from 'react-twitter-widgets'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms } from '../../../state/hooks'\r\n\r\nconst StyledTwitterCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst TwitterCard = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <StyledTwitterCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(10003, 'Announcements')}\r\n        </Heading>\r\n        <Timeline\r\n          dataSource={{\r\n            sourceType: 'profile',\r\n            screenName: 'pantherswap'\r\n          }}\r\n          options={{\r\n            height: '300',\r\n            chrome: \"noheader, nofooter\",\r\n            width: \"400\"\r\n          }}\r\n        />\r\n      </CardBody>\r\n    </StyledTwitterCard>\r\n  )\r\n}\r\n\r\nexport default TwitterCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from './components/FarmStakingCard'\r\nimport LotteryCard from './components/LotteryCard'\r\nimport CakeStats from './components/CakeStats'\r\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\r\nimport TwitterCard from './components/TwitterCard'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  background-image: url('/images/home/3.png');\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 116px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-image: url('/images/home/3.png'), url('/images/home/3b.png');\r\n    background-position: left center, right center;\r\n    height: 165px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 48px;\r\n\r\n  & > div {\r\n    grid-column: span 6 / auto;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst FullCards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n\r\n  & > div {\r\n    grid-column: span 12;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 12;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Page>\r\n      <Hero>\r\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\r\n          {TranslateString(576, 'Pitbull Swap')}\r\n        </Heading>\r\n        <Text>{TranslateString(578, 'The First Automatic Liquidity Acquisition Yield Farm & AMM on Binance Smart Chain.')}</Text>\r\n      </Hero>\r\n      <div>\r\n        <Cards>\r\n          <FarmStakingCard />\r\n          <LotteryCard />\r\n        </Cards>\r\n        <Cards>\r\n          <TwitterCard/>\r\n          <FullCards>\r\n            <CakeStats />\r\n            <TotalValueLockedCard />\r\n          </FullCards>\r\n        </Cards>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Home\r\n"],"sourceRoot":""}